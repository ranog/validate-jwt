name: Deploy PROD

on:
  push:
    branches: [main, master]

env:
  AWS_REGION: us-west-2
  IMAGE_REPO_NAME: validate-jwt-prod
  ECR_REGISTRY: 231711413035.dkr.ecr.us-west-2.amazonaws.com

jobs:
  terraform:
    uses: ./.github/workflows/deploy-infra.yml
    secrets: inherit

  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Export requirements.txt
        run: poetry export --without-hashes --format=requirements.txt --output=requirements.txt

      - uses: actions/upload-artifact@v4
        with:
          name: requirements.txt
          path: requirements.txt

  rebase-master-on-dev:
    name: Rebase master on dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Rebase master on dev
        run: git pull --rebase origin master

      - name: Push changes
        run: git push --force-with-lease

  qa:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - uses: actions/checkout@v3

      - name: Install tools
        run: pip install ruff black

      - name: Lint with Ruff
        run: ruff check .

      - name: Check formatting with Black
        run: black --check src/ tests/

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry and deps
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Run tests with coverage
        run: |
          pytest --cov=src tests/ --cov-fail-under=90

  deploy:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    environment: AWS_KEYS
    needs: [ tests, qa ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_REPO_NAME:$GITHUB_SHA .
          docker tag $ECR_REGISTRY/$IMAGE_REPO_NAME:$GITHUB_SHA $ECR_REGISTRY/$IMAGE_REPO_NAME:latest
          docker push $ECR_REGISTRY/$IMAGE_REPO_NAME:$GITHUB_SHA
          docker push $ECR_REGISTRY/$IMAGE_REPO_NAME:latest

      - name: Fill in the new image ID in the task definition
        run: |
          sed -i "s|<IMAGE_URI>|$ECR_REGISTRY/$IMAGE_REPO_NAME:$GITHUB_SHA|g" $ECS_TASK_DEFINITION

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
